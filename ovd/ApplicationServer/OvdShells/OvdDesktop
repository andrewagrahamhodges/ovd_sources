#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2009-2013 Ulteo SAS
# http://www.ulteo.com
# Author Laurent CLOUET <laurent@ulteo.com> 2010
# Author Gauvain POCENTEK <gauvain@ulteo.com> 2009
# Author Julien LANGLOIS <julien@ulteo.com> 2009, 2010, 2011
# Author David PHAM-VAN <d.pham-van@ulteo.com> 2012
#Â Author David LECHEVALIER <david@ulteo.com> 2013
#
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2
# of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import ConfigParser
import os
import sys
import time

from ovd_shells.Config import Config
from ovd_shells.Platform import _platform as Platform
from ovd_shells.Platform.ExternalAppsClient import ExternalAppsClient
from ovd_shells.Platform.Folders import Folders
from ovd_shells.Platform.Shortcuts import Shortcuts
from ovd_shells.Platform.InstancesManager import InstancesManager
from ovd_shells import Util


def main():
	if os.environ.has_key("OVD_SESSION_DIR"):
		user_sdir = os.environ["OVD_SESSION_DIR"]
	else:
		user_sdir = Platform.getUserSessionDir()
		if user_sdir is None:
			print "Exit because no OVD environment"
			sys.exit(1)
		
		os.environ["OVD_SESSION_DIR"] = user_sdir
	
	Util.loadUserEnv(user_sdir)
	config = Config()
	config.load(user_sdir)
	
	# IME customization
	if config.use_local_ime:
		Platform.setupIME()
	
	# Load profile share
	folders = Folders(config.profile_mode)
	folders.registerShares()
	
	# Synchronize Shortcuts
	shortcuts = Shortcuts()
	shortcuts.synchronize(os.path.join(user_sdir, "Shortcuts"))
	
	
	# launch the integrated client
	external_client = ExternalAppsClient(user_sdir)
	
	everything_is_fine = external_client.load_config(config)
	
	if everything_is_fine:
		# actually launch the client
		external_client.start()
	
	im = InstancesManager()
	im.setSharedFolderDB(folders)
	
	# Script to auto starts
	Util.manageAutoStartScripts(config, user_sdir)
	
	# Applications to auto starts
	Util.manageAutoStartApplication(config, im)
	
	Util.startModules()
	
	if config.no_desktop_process:
		Platform.startWM()
		time.sleep(5)
		
		while im.has_running_instances():
			time.sleep(5)
			
			im.get_exited_instances()
		
		print "No anymore instances, exiting"
	else:
		Platform.startDesktop()
	
	t0 = time.time()
	im.kill_all_apps()
	while im.has_running_instances():
		if time.time() - t0 > 20:
			print "Still running instances after 20 seconds, exiting anyway ..."
			break
		
		im.get_exited_instances()
		if im.has_running_instances():
			im.kill_all_apps()
			time.sleep(1)
	
	sys.exit(0)


if __name__ == "__main__":
	Util.redirect_to_dump()
	main()
