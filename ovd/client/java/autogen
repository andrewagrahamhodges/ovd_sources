#! /usr/bin/python

# Copyright (C) 2010-2013 Ulteo SAS
# http://www.ulteo.com
# Author Samuel BOVEE <samuel@ulteo.com> 2010-2011
# Author Julien LANGLOIS <julien@ulteo.com> 2010
# Author Yann Hodique <y.hodique@ulteo.com> 2012
# Author David PHAM-VAN <d.pham-van@ulteo.com> 2013
# Author Vincent ROULLIER <v.roullier@ulteo.com> 2013
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2
# of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import getopt
import os
import sys
import shutil
from subprocess import Popen


path = os.path.dirname( os.path.realpath( __file__ ) )
jni = True


def usage():
	print "Usage: %s [--no-jni]" % sys.argv[0]
	print "\t--no-jni: disable jni compilation"


def make_jni(lib):
	libdir = os.path.join(path, lib)
	req_dir = os.path.join(path, "required_libraries", lib)
	ext = ".so" if sys.platform == "linux2" else ".dll"
	for arch in ['32','64']:
		dst = os.path.join(req_dir, arch)
		
		# clean
		if os.path.exists(dst):
			shutil.rmtree(dst)
		
		# generate lib
		Popen(["sh", os.path.join(libdir, "compile"), arch], cwd=libdir).wait()
		
		# move files into "required libraries" folder
		src = os.path.join(libdir, arch, lib + ext)
		if os.path.exists(src):
			os.makedirs(dst)
			shutil.move(src, dst)


try:
	opts, args = getopt.getopt(sys.argv[1:], '', ['no-jni'])
except getopt.GetoptError, err:
	print >> sys.stderr, str(err)
	usage()
	sys.exit(1)

for o, a in opts:
	if o in ("--no-jni"):
		jni = False

if len(args) > 0:
	print >> sys.stderr, "Invalid argument '%s'" % args[0]
	usage()
	sys.exit(1)

# Detect the version
if os.environ.has_key("OVD_VERSION"):
	version = os.environ["OVD_VERSION"]
else:
	version = file("VERSION", "r").readline().strip()
	version += "~dev"

f = file(os.path.join(path, "build.xml.in"), "r")
content = f.read()
f.close()

content = content.replace("@VERSION@", str(version))

f = file(os.path.join(path, "build.xml"), "w")
f.write(content)
f.close()

if sys.platform == "linux2" and jni:
	make_jni("libXClientArea")
if jni:
	make_jni("libPCSC")
	make_jni("librdp")
